# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build get-zap

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
  
  build:
    name: Build local
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
    - name: Build
      run: go build -v ./...
    - name: Test
      run: go test -v ./...

  build-all:
    name: Build all binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    needs: [build]
    steps:
    - if: matrix.goos == 'windows'
      run: GOOS=${{matrix.goos}} GOARCH=${{matrix.goarch}} go build -o bin/get-zap-${{matrix.goos}}-${{matrix.goarch}}.exe
    - if: matrix.goos != 'windows'
      run: GOOS=${{matrix.goos}} GOARCH=${{matrix.goarch}} go build -o bin/get-zap-${{matrix.goos}}-${{matrix.goarch}}

  dist-no-win:
    name: Distribute all non-windows binaries to archives
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    needs: [build-all]
    steps:
    - name: Archive the binaries
      uses: actions/upload-artifact@v2
      with:
        name: get-zap-${{matrix.goos}}-${{matrix.goarch}}
        path: bin/get-zap-${{matrix.goos}}-${{matrix.goarch}}

  dist-win:
    name: Distribute all windows binaries to archives
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows]
        goarch: [amd64, arm64]
    needs: [build-all]
    steps:
    - name: Archive the binaries
      uses: actions/upload-artifact@v2
      with:
        name: get-zap-${{matrix.goos}}-${{matrix.goarch}}.exe
        path: bin/get-zap-${{matrix.goos}}-${{matrix.goarch}}.exe
